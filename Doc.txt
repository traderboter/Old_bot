اتفاقات:

برنامه از بلوک if __name__ == "__main__" شروع می‌شود
تابع async main() با asyncio.run() اجرا می‌شود
مرحله ۲: پردازش آرگومان‌های خط فرمان (خط 168-186)
ساخته می‌شود:

یک ArgumentParser برای دریافت پارامترهای خط فرمان
پارامترهای قابل دریافت:

-c/--config: مسیر فایل تنظیمات (پیش‌فرض: config.yaml)
-v/--verbose: فعال‌سازی لاگ جزئیات
--symbols: لیست نمادهای معاملاتی
--strategy: انتخاب استراتژی خاص
--backup: ایجاد نسخه پشتیبان
--no-trading: حالت شبیه‌سازی
--no-watch-config: غیرفعال کردن نظارت بر تغییرات کانفیگ
--update-config: به‌روزرسانی بخشی از تنظیمات
مرحله ۳: بارگذاری فایل تنظیمات (خط 189-210)
فراخوانی: load_config(args.config)

اتفاقات:

خواندن فایل تنظیمات (YAML یا JSON)
ثبت زمان آخرین تغییر فایل
اضافه کردن بخش config_management در صورت عدم وجود
ایجاد دایرکتوری data (storage directory)
خطاها: در صورت عدم وجود یا خطا در فایل، برنامه با کد خروج 1 متوقف می‌شود

مرحله ۴: به‌روزرسانی تنظیمات از خط فرمان (خط 212-248)
اگر --update-config فراخوانی شود:

پارس کردن مقدار JSON
به‌روزرسانی یا ایجاد بخش در config
ذخیره‌سازی تغییرات در فایل تنظیمات
مرحله ۵: راه‌اندازی سیستم لاگینگ (خط 251)
فراخوانی: setup_logging(config, args.verbose)

ساخته می‌شود:

Console Handler برای نمایش لاگ‌ها در ترمینال
File Handler (اختیاری) با یا بدون قابلیت چرخش فایل
تنظیمات:

سطح لاگ (DEBUG/INFO/WARNING/ERROR)
فرمت لاگ
حداکثر سایز فایل و تعداد نسخه پشتیبان
مرحله ۶: پشتیبان‌گیری اولیه (خط 257-286)
اگر --backup فراخوانی شود:

ساخته می‌شود:

یک فایل ZIP شامل:
config.yaml
trades.db
adaptive_learning_data.json
correlation_data.json
performance_metrics.json
مسیر ذخیره: data/backups/manual_backup_[timestamp].zip

مرحله ۷: اعمال تغییرات command-line (خط 289-299)
اتفاقات:

اگر --no-trading: تنظیم حالت شبیه‌سازی
اگر --symbols: تنظیم لیست نمادهای معاملاتی
مرحله ۸: ایجاد نمونه ربات (خط 302-322)
فراخوانی: bot_instance = CryptoTradingBot(args.config)

در کلاس CryptoTradingBot.init اتفاقات زیر می‌افتد:

8.1 ایجاد ConfigurationManager (خط 1185)
مدیریت بارگذاری و تغییرات تنظیمات
8.2 مقداردهی متغیرهای اولیه
self.exchange_client = None
self.data_fetcher = None
self.signal_generator = None
self.signal_processor = None
self.trade_manager = None
self.performance_tracker = None
self.backup_manager = None
self.strategy_manager = None
8.3 تنظیم وضعیت اجرا
ایجاد instance_id یکتا
ثبت زمان شروع
جمع‌آوری اطلاعات سیستم (OS, Platform, Python version)
8.4 ثبت listener برای تغییرات کانفیگ
config_manager.register_update_listener(self._handle_config_changes)
مرحله ۹: تنظیم هندلرهای سیگنال سیستم (خط 325-332)
ثبت می‌شود:

SIGINT (Ctrl+C)
SIGTERM (kill command)
هدف: خروج تمیز و ذخیره داده‌ها قبل از بستن

مرحله ۱۰: اجرای ربات (خط 345)
فراخوانی: await bot_instance.run()

🔧 جریان اجرای متد run() در CryptoTradingBot
مرحله 10.1: راه‌اندازی کامپوننت‌ها (خط 2409)
فراخوانی: await self.initialize_components()

کامپوننت‌های راه‌اندازی شده به ترتیب:
1. TradingStrategyManager (خط 1650-1658)

مدیریت استراتژی‌های مختلف معاملاتی
انتخاب کانفیگ بر اساس استراتژی فعال
2. TradingBrainAI (خط 1662-1674)

هوش مصنوعی معاملاتی
مدل‌های یادگیری ماشین
3. ExchangeClient (خط 1677-1705)

from exchange_client import ExchangeClient
self.exchange_client = ExchangeClient(self.config)
await self.exchange_client._init_session()
ایجاد نشست HTTP/WebSocket برای ارتباط با صرافی
4. MarketDataFetcher (خط 1708-1737)

from market_data_fetcher import MarketDataFetcher
self.data_fetcher = MarketDataFetcher(self.config, self.exchange_client)
await self.data_fetcher.initialize()
دریافت داده‌های بازار (قیمت، حجم، OHLCV)
مدیریت کش
5. SignalGenerator (خط 1740-1795)

from signal_generator import SignalGenerator
self.signal_generator = SignalGenerator(self.config)
تولید سیگنال‌های معاملاتی
شامل:
Market Regime Detector (تشخیص رژیم بازار)
Adaptive Learning (یادگیری تطبیقی)
Correlation Manager (مدیریت همبستگی)
Circuit Breaker (توقف اضطراری)
6. MLSignalIntegration (خط 1798-1823)

self.ml_integration = MLSignalIntegration(
    signal_generator=self.signal_generator,
    trading_brain=self.trading_brain
)
یکپارچه‌سازی سیگنال‌ها با هوش مصنوعی
تقویت سیگنال‌ها با ML
7. BotPerformanceTracker (خط 1826-1828)

self.performance_tracker = BotPerformanceTracker(self.config, self.db_path)
ردیابی متریک‌های عملکرد
ذخیره در: data/performance_metrics.json
8. BackupManager (خط 1831-1833)

self.backup_manager = BackupManager(self.config)
پشتیبان‌گیری خودکار دوره‌ای
9. TradeManager (خط 1836-1920)

from trade_manager import TradeManager
self.trade_manager = TradeManager(self.config, self.db_path)
self.trade_manager.initialize_db()
مدیریت معاملات
اجرای خرید/فروش
مدیریت Take Profit و Stop Loss
ذخیره معاملات در: data/trades.db (SQLite)
10. SignalProcessor (خط 1923-1964)

from signal_processor import SignalProcessor
self.signal_processor = SignalProcessor(
    config=self.config,
    market_data_fetcher=self.data_fetcher,
    signal_generator=self.signal_generator,
    ml_integration=self.ml_integration
)
await self.signal_processor.initialize()
پردازش دوره‌ای سیگنال‌ها
ارسال سیگنال‌ها به TradeManager
11. دریافت نمادهای فعال (خط 1967)

لیست نمادهای معاملاتی از صرافی
مرحله 10.2: آموزش مدل‌های AI (خط 2414-2419)
فراخوانی: await self._train_ai_models()

اتفاقات:

دریافت داده‌های تاریخی (معمولاً BTC/USDT، 1 سال)
آماده‌سازی داده (Feature Engineering)
آموزش مدل‌های Ensemble (Random Forest, XGBoost, LSTM)
آموزش Position Sizer (اختیاری)
داده‌ها ذخیره می‌شوند در:

مدل‌های آموزش‌دیده در حافظه
وزن‌های مدل (اگر فعال باشد)
مرحله 10.3: شروع سرویس‌های پس‌زمینه (خط 2422)
فراخوانی: await self.start_services()

سرویس‌های شروع شده:

1. به‌روزرسانی دوره‌ای قیمت‌ها (خط 2140-2145)

await self.trade_manager.start_periodic_price_update()
بررسی قیمت‌های جاری هر 10 ثانیه
به‌روزرسانی وضعیت معاملات فعال
2. پردازش دوره‌ای سیگنال‌ها (خط 2148-2149)

await self.signal_processor.start_periodic_processing()
تولید و بررسی سیگنال‌های جدید
فواصل زمانی مختلف برای هر تایم‌فریم
3. پشتیبان‌گیری خودکار (خط 2152-2154)

await self.backup_manager.start_automated_backup()
پشتیبان‌گیری دوره‌ای (پیش‌فرض: هر 24 ساعت)
ذخیره در: data/backups/backup_[timestamp].zip
4. نظارت بر تغییرات تنظیمات (خط 2157-2162)

self._config_check_task = asyncio.create_task(self._config_watch_loop())
بررسی تغییرات در config.yaml هر 30 ثانیه
بارگذاری مجدد خودکار
5. ایجاد پشتیبان اولیه (خط 2169-2172)

مرحله 10.4: حلقه اصلی ربات (خط 2430-2446)
حلقه while تا زمان دریافت سیگنال توقف:

while not self._shutdown_requested.is_set():
    # 1. به‌روزرسانی زمان کارکرد
    self.running_status['uptime_seconds'] = ...
    
    # 2. بررسی سلامت کامپوننت‌ها
    await self._check_component_health()
    
    # 3. به‌روزرسانی نمادهای فعال (هر 30 دقیقه)
    if self.running_status['uptime_seconds'] % 1800 < 10:
        await self._fetch_active_symbols()
    
    # 4. انتظار 10 ثانیه
    await asyncio.sleep(10)
بررسی سلامت شامل:

وضعیت اتصال به صرافی
وضعیت DataFetcher
وضعیت SignalProcessor
وضعیت TradeManager
راه‌اندازی مجدد در صورت خطا
📊 جریان داده و ارتباطات بین کامپوننت‌ها
┌─────────────────────┐
│  ExchangeClient     │ ◄── ارتباط با صرافی
└──────────┬──────────┘
           │
           ▼
┌─────────────────────┐
│ MarketDataFetcher   │ ◄── دریافت داده‌های بازار
└──────────┬──────────┘
           │
           ▼
┌─────────────────────┐         ┌─────────────────┐
│  SignalGenerator    │ ◄─────► │ TradingBrainAI  │
└──────────┬──────────┘         └─────────────────┘
           │                            │
           ▼                            │
┌─────────────────────┐                │
│ MLSignalIntegration │ ◄──────────────┘
└──────────┬──────────┘
           │
           ▼
┌─────────────────────┐
│  SignalProcessor    │ ◄── پردازش سیگنال‌ها
└──────────┬──────────┘
           │
           ▼
┌─────────────────────┐
│   TradeManager      │ ◄── اجرای معاملات
└──────────┬──────────┘
           │
           ▼
┌─────────────────────┐
│  ExchangeClient     │ ◄── ارسال سفارش
└─────────────────────┘
💾 فایل‌ها و داده‌های ایجاد شده
1. پایگاه داده
مسیر: data/trades.db
محتوا:
معاملات (trades)
موقعیت‌های فعال (positions)
تاریخچه سفارشات
نتایج معاملات
2. فایل‌های JSON
performance_metrics.json:

{
  "daily_metrics": {...},
  "system_stats": {
    "uptime_seconds": 3600,
    "restart_count": 1,
    "error_count": 0
  }
}
adaptive_learning_data.json:

نتایج یادگیری تطبیقی
امتیازات الگوها
تنظیمات بهینه
correlation_data.json:

همبستگی بین نمادها
موقعیت‌های فعال
3. فایل‌های پشتیبان
مسیر: data/backups/
فرمت: backup_YYYYMMDD_HHMMSS.zip
4. فایل‌های لاگ (اختیاری)
مسیر: تنظیم شده در config
محتوا: تمام رویدادها، خطاها، معاملات
🔄 فرآیندهای دوره‌ای در حال اجرا
| فرآیند | فاصله زمانی | توضیح | |--------|-------------|--------| | به‌روزرسانی قیمت | 10 ثانیه | بررسی قیمت‌ها و شرایط TP/SL | | پردازش سیگنال 5m | 5 دقیقه | تولید سیگنال برای تایم‌فریم 5 دقیقه‌ای | | پردازش سیگنال 15m | 15 دقیقه | تولید سیگنال برای تایم‌فریم 15 دقیقه‌ای | | پردازش سیگنال 1h | 1 ساعت | تولید سیگنال برای تایم‌فریم ساعتی | | بررسی کانفیگ | 30 ثانیه | نظارت بر تغییرات فایل تنظیمات | | به‌روزرسانی نمادها | 30 دقیقه | دریافت لیست نمادهای فعال از صرافی | | پشتیبان‌گیری | 24 ساعت | ایجاد نسخه پشتیبان از داده‌ها | | بررسی سلامت | 10 ثانیه | بررسی وضعیت کامپوننت‌ها |

🛑 خاموش شدن و پاکسازی
وقتی Ctrl+C زده می‌شود یا سیگنال SIGTERM دریافت می‌شود:

ثبت سیگنال و فراخوانی bot_instance.stop()
تنظیم پرچم _shutdown_requested
خروج از حلقه اصلی
فراخوانی await self.shutdown():
ایجاد پشتیبان نهایی
ذخیره متریک‌های عملکرد
توقف تمام سرویس‌های پس‌زمینه
بستن اتصال به صرافی
بستن پایگاه داده
لغو تسک‌های asyncio
خروج با کد مناسب (0 برای موفق، 1 برای خطا)